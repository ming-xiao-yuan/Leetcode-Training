
class Solution:
	def validTree(self, n, edges):
		if not n:
			return True
		adj = {i:[] for i in range(n)}

		for n1, n2 in edges:
			adj[n1].append(n2)
			adj[n2].append(n1)

		visit = set()

		def dfs(i, prev):
			# loop
			if i in visit:
				return False
			visit.add(i)
			for j in adj[i]:
				if j == prev:
					continue
				# detected a loop
				if not dfs(j, i):
					return False
			return True
		return dfs(0, -1) and n == len(visit)
	
Time: O(E+V)
Space: O(E+V) because of adjacency list
To be a valide tree, we need the graph to not have loops and all the nodes are connected. 
We use a visited set to track if it has loops and if the len(set) == number of nodes, we know its a continuous tree. 
We also need to have a previousNode value to keep track of false positive loops.
    
